Introduction:

    Brutis is a tool designed to exercise memcache instances providing 
    reproducible performance data for comparison purposes. Brutis can be useful
    for sizing of memcache clusters as well as testing changes to the system,
    the hardware, and/or the environment. Much like a dynamometer, the numbers
    Brutis produces are not as important as the differences in the numbers
    between changes to the system, the hardware, and/or the environment. 

    When sizing memcached clusters, Brutis helps by stressing the memcached
    cluster to see:
        * How many ops the cluster is capable of
        * How much load the network config can take
        * How many connections a memcache cluster is capable of handling 

    With respect to instance (not cluster) sizing, Brutis can be used to
    simulate varying object and key sizes to see how many keys/objects can fit
    in a memcache instance before evictions start.

    Brutis is made up of three components; The main executable, the client, and     the collector.

    The main executable serves as a wrapper for the client and collector. It 
    handles forking and process control. The client is the actual memcache
    client program. The collector aggregates the stats from one or many client
    processes and outputs results to the screen, file, or posts data to a url.

    Brutis comes with a standard set of tests to help the user get started.
    These tests are defined in XML and are located in the tests subdirectory.
    Users may create their own tests to create a variety of different usage
    patterns.

XML Test layout:

    Tests in brutis are defined in XML using the following componenets:

        * <test>
        * <jobset>
        * <dataset>
        * <operations>

    <test>

        a Test has the following possible attributes:
            * name - descriptive name for the test.
            * desc - longer description of what the tests does.
            * version - version of the current test config.

    <jobset>

        Jobsets are children of <test>. They are containers that allow
        description and control of the current working set.

        jobsets can have the following attributes:

            * name - descriptive name of the task being performed.
            * forks - The number of client proccesses brutis should start.
            * time - The amount of time to run before job is complete.
            * operations  - The number of operations per fork to do before job
              is complete.

    <dataset>

        Datasets are a child of <jobset>. They define the dataset to use for
        the job.

        Datasets can have the following children:
            * <key>
            * <value>

    <Key>

        Keys are children of <dataset>. They define the keyset to use when 
        doing operations in memcache.
 
        Keys can have the following attributes:
            * name - The name of the keyset being defined. 
            * start - The starting range for a key.
            * end - The ending range for a key.
            * pattern - The pattern to use when transversing the keyset.
            * prefix - The prefix of the key.
            * divide - Whether to divide of the keyset per client proccess.

    <Value>

        Values are children of <dataset>. They define the valueset to use when
        doing operations in memcache. Values can be generated by brutis or
        defined statically inside the tag.

        Values can have the following attributes:
            * name - The name of the valueset being defined.
            * mode - The mode of the key. possible values are static or
              generated.
            * size - The size of the key to generate.

    <operations>

        Operations are a child of <jobset>. Brutis will walk through each
        operation and perform the task sequentially in a loop until either
        time or operations attribute in the jobset have been reached.


    <operation>

        type=set
            Set operations have the following attributes:
                * keyset
                * valueset
                * expire

        type=setmulti
            SetMulti operations have the following attributes:
                * keyset
                * valueset
                * count
                * expire

        type=get
            Get operations have the following attributes:
                * keyset

        type=getmulti
            GetMulti operations have the following attributes:
                * keyset
                * count

        type=append
            Append operations have the following attributes:
                * keyset

        type=delete
            Delete operations have the following attributes:
                * keyset

        type=replace
            Replace operations have the following attributes:
                * keyset
                * valueset
                * expire

        type=increment
            Increment operations have the following attributes:
                * keyset
                * offset

        type=decrement
            Decrement operations have the following attributes:
                * keyset
                * offset

        type=sleep
            sleep operations have the following attributes:
                * count

